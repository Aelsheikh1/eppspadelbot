/* eslint-env serviceworker */
/* global importScripts, firebase, clients */
/* eslint-disable no-restricted-globals */

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

// Import Firebase messaging for background notifications
importScripts('https://www.gstatic.com/firebasejs/10.7.2/firebase-app-compat.js');
importScripts('https://www.gstatic.com/firebasejs/10.7.2/firebase-messaging-compat.js');

// This service worker can be customized!
let currentToken = null;
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }

  if (event.data && event.data.type === 'UPDATE_FCM_TOKEN') {
    console.log('[Service Worker] Received new FCM token:', event.data.token);
    currentToken = event.data.token;
  }

  if (event.data && event.data.type === 'FIREBASE_CONFIG') {
    console.log('[Service Worker] Received Firebase config');
    self.FIREBASE_CONFIG = event.data.config;
    
    // Reinitialize Firebase with new config
    firebase.initializeApp(self.FIREBASE_CONFIG);
    const messaging = firebase.messaging();
    
    // Reattach background message handler
    messaging.onBackgroundMessage(async (payload) => {
      console.log('[Service Worker] Received background message:', payload);
      try {
        const notificationTitle = payload.notification.title;
        const tag = (payload.data && (payload.data.notificationId || payload.data.gameId)) || 'default-notification';
        if (shownNotificationTags.has(tag)) {
          console.log('[Service Worker] Skipping duplicate notification (background):', tag);
          return;
        }
        shownNotificationTags.add(tag);
        const notificationOptions = {
          body: payload.notification.body,
          icon: '/logo192.png',
          badge: '/logo192.png',
          data: payload.data,
          actions: [
            {
              action: 'view',
              title: 'View'
            }
          ],
          tag
        };
        self.registration.showNotification(notificationTitle, notificationOptions);
      } catch (error) {
        console.error('[Service Worker] Error showing notification:', error);
      }
    });
  }
});

// Deduplication: Track shown notification tags for this SW lifetime
const shownNotificationTags = new Set();

// Firebase messaging configuration
firebase.initializeApp({
  apiKey: self.FIREBASE_CONFIG?.apiKey,
  authDomain: self.FIREBASE_CONFIG?.authDomain,
  projectId: self.FIREBASE_CONFIG?.projectId,
  storageBucket: self.FIREBASE_CONFIG?.storageBucket,
  messagingSenderId: self.FIREBASE_CONFIG?.messagingSenderId,
  appId: self.FIREBASE_CONFIG?.appId
});

const messaging = firebase.messaging();

// Handle background messages
messaging.onBackgroundMessage(async (payload) => {
  console.log('[Service Worker] Received background message:', payload);
  try {
    const notificationTitle = payload.notification.title;
    const notificationOptions = {
      body: payload.notification.body,
      icon: '/web-app-manifest-192x192.png', // Use transparent icon
      badge: '/web-app-manifest-192x192.png',
      data: payload.data,
      actions: [
        {
          action: 'view',
          title: 'View'
        }
      ],
      tag: payload.data?.notificationId || payload.data?.gameId || 'default-notification',
      requireInteraction: true
    };
    // Deduplicate: close notifications with same tag
    const activeNotifications = await self.registration.getNotifications({ tag: notificationOptions.tag });
    activeNotifications.forEach(notification => notification.close());
    await self.registration.showNotification(notificationTitle, notificationOptions);
  } catch (error) {
    console.error('[Service Worker] Error showing notification:', error);
  }
});

// Handle notification click
self.addEventListener('notificationclick', (event) => {
  console.log('[Service Worker] Notification click:', event);
  
  try {
    event.notification.close();
    
    if (event.action === 'view' && event.notification.data) {
      const gameId = event.notification.data.gameId;
      if (gameId) {
        // Open the game details page
        const urlToOpen = new URL(`/games/${gameId}`, self.location.origin).href;
        
        const promiseChain = clients.matchAll({
          type: 'window',
          includeUncontrolled: true
        }).then((windowClients) => {
          // Check if there is already a window/tab open with the target URL
          let matchingClient = null;
          
          for (let i = 0; i < windowClients.length; i++) {
            const windowClient = windowClients[i];
            // Check if the URL of the window includes our target URL
            if (windowClient.url.includes(gameId)) {
              matchingClient = windowClient;
              break;
            }
          }
          
          // If a matching window is found, focus it
          if (matchingClient) {
            return matchingClient.focus();
          } else {
            // If no matching window is found, open a new one
            return clients.openWindow(urlToOpen);
          }
        });
        
        event.waitUntil(promiseChain);
      }
    } else {
      // Default behavior - open the app
      const promiseChain = clients.matchAll({
        type: 'window',
        includeUncontrolled: true
      }).then((windowClients) => {
        if (windowClients.length > 0) {
          return windowClients[0].focus();
        } else {
          return clients.openWindow('/');
        }
      });
      
      event.waitUntil(promiseChain);
    }
  } catch (error) {
    console.error('[Service Worker] Error in notification click handler:', error);
  }
});

// Handle push event
self.addEventListener('push', (event) => {
  console.log('[Service Worker] Push received:', event);
  let notificationData = {
    title: 'EPP Padel Bot',
    body: 'New notification',
    icon: '/web-app-manifest-192x192.png', // Use transparent icon
    badge: '/web-app-manifest-192x192.png',
    data: {},
    tag: 'default-notification'
  };
  try {
    if (event.data) {
      const data = event.data.json();
      notificationData = {
        title: (data.notification && data.notification.title) || notificationData.title,
        body: (data.notification && data.notification.body) || notificationData.body,
        icon: (data.notification && data.notification.icon) || notificationData.icon,
        badge: (data.notification && data.notification.badge) || notificationData.badge,
        data: data.data || {},
        tag: (data.data && (data.data.notificationId || data.data.gameId)) || 'default-notification'
      };
    }
  } catch (error) {
    console.error('[Service Worker] Error parsing push data:', error);
  }
  event.waitUntil((async () => {
    // Deduplicate: only show if not already shown
    if (shownNotificationTags.has(notificationData.tag)) {
      console.log('[Service Worker] Skipping duplicate notification (push):', notificationData.tag);
      return;
    }
    shownNotificationTags.add(notificationData.tag);
    // Deduplicate: close notifications with same tag
    const activeNotifications = await self.registration.getNotifications({ tag: notificationData.tag });
    activeNotifications.forEach(notification => notification.close());
    await self.registration.showNotification(notificationData.title, {
      body: notificationData.body,
      icon: notificationData.icon,
      badge: notificationData.badge,
      data: notificationData.data,
      actions: [
        {
          action: 'view',
          title: 'View'
        }
      ],
      tag: notificationData.tag,
      requireInteraction: true
    });
  })());
});
